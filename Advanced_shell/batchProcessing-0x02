#!/bin/bash

# List of Pokémon to fetch
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Base URL for the Pokémon API
BASE_URL="https://pokeapi.co/api/v2/pokemon"

# Delay between requests (in seconds) to avoid rate limiting
DELAY=1

# Maximum number of retry attempts
MAX_RETRIES=3

# Function to fetch Pokémon data with retry logic
fetch_pokemon_data() {
    local pokemon=$1
    local retry_count=0
    
    while [ $retry_count -lt $MAX_RETRIES ]; do
        echo "Attempting to fetch data for $pokemon (attempt $((retry_count + 1))/$MAX_RETRIES)..."
        
        # Make the API request with timeout
        if curl -s -f --max-time 30 "$BASE_URL/$pokemon" -o "$pokemon.json" 2>/dev/null; then
            echo "Successfully fetched data for $pokemon and saved to $pokemon.json"
            return 0
        else
            retry_count=$((retry_count + 1))
            if [ $retry_count -lt $MAX_RETRIES ]; then
                echo "Failed to fetch $pokemon (attempt $retry_count). Retrying in $DELAY seconds..."
                sleep $DELAY
            fi
        fi
    done
    
    # If all retries failed, log the error
    echo "Failed to fetch data for $pokemon after $MAX_RETRIES attempts at $(date)" >> errors.txt
    echo "Skipping $pokemon and continuing with next Pokémon..."
    return 1
}

# Main execution
echo "Starting Pokémon data fetch with robust error handling..."

for pokemon in "${POKEMON_LIST[@]}"; do
    fetch_pokemon_data "$pokemon"
    
    # Add delay between different Pokémon requests
    if [ "$pokemon" != "${POKEMON_LIST[-1]}" ]; then
        echo "Waiting $DELAY seconds before next Pokémon..."
        sleep $DELAY
    fi
done

echo "Pokémon data fetch completed!"
echo "Check errors.txt for any failed requests." 